// Complexity	Performance (Best to Worst)
// O(1)	ЁЯФе рж╕ржмржЪрзЗрзЯрзЗ ржнрж╛рж▓рзЛ
// O(log n)	тЬЕ ржЦрзБржм ржнрж╛рж▓рзЛ
// O(n)	ЁЯШР ржЧрзНрж░рж╣ржгржпрзЛржЧрзНржп
// O(n log n)	ЁЯШР ржорж╛ржЭрж╛рж░рж┐
// O(n┬▓)	тЭМ ржзрзАрж░
// O(2тБ┐)	тЭМтЭМ ржЦрзБржм ржзрзАрж░
// O(n!)	ЁЯЪл рж╕ржмржЪрзЗрзЯрзЗ ржЦрж╛рж░рж╛ржк

// тЬЕ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржорзВрж▓ ржмрж┐рж╖рзЯржЧрзБрж▓рзЛ
// тЬФ Big O ржмрж▓рждрзЗ ржмрзЛржЭрж╛рзЯ ржПржХржЯрж┐ ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо ржХржд ржжрзНрж░рзБржд ржЪрж▓рзЗред
// тЬФ рж╕рзЗрж░рж╛ Complexity рж╣рж▓рзЛ O(1) & O(log n), ржЖрж░ рж╕ржмржЪрзЗрзЯрзЗ ржЦрж╛рж░рж╛ржк рж╣рж▓рзЛ O(n!)ред
// тЬФ Sorting, Searching ржУ Recursive рж╕ржорж╕рзНржпрж╛ржЧрзБрж▓рзЛрждрзЗ Big O ржЕржирзЗржХ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред



// function sumOfAll(n){
//   let total = 0;
//   for(let i = 0; i < n; i++){
//     total += i
//   }
//   return total
// }

// console.log(sumOfAll(10));


// function binarySearch(arr, target){
//   let  left = 0, right = arr.length - 1;
//   while(left <= right){
//     let mid = Math.floor((let + right) /2);
//     if(arr[mid] ===  target) return mid;
//     else if(arr[mid] < target) left = mid + 1;
//     else right = mid - 1
//   }
//   return -1;